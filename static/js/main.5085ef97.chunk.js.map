{"version":3,"sources":["components/ProgressBar.js","components/AppBar.js","ethereum/web3.js","ethereum/lotteryFactory.js","ethereum/lottery.js","store/actions/lotteryActionCreators.js","store/actions/actionTypes.js","store/actions/uiActionCreators.js","store/actions/factoryActionCreators.js","components/CurrentLotteryDetails.js","components/factoryPanel.js","components/ClosedLotteryDialog.js","App.js","serviceWorker.js","store/reducers/factoryReducer.js","store/reducers/lotteryReducer.js","store/reducers/uiReducer.js","store/configureStore.js","index.js"],"names":["withStyles","root","flexGrow","props","classes","react_default","a","createElement","className","LinearProgress_default","color","styles","grow","menuButton","marginLeft","marginRight","appBar","backgroundColor","web3","connect","state","isLoading","ui","dispatch","AppBar_default","position","style","Toolbar_default","IconButton_default","aria-label","Menu_default","Typography_default","variant","Button_default","components_ProgressBar","window","Web3","currentProvider","provider","require","process","undefined","alert","instance","eth","Contract","JSON","parse","LotteryFactory","interface","ethereum_lottery","address","Lottery","setPlayedLottery","lottery","type","getLotteryDetails","_ref6","Object","asyncToGenerator","regenerator_default","mark","_callee6","lotteryInstance","wrap","_context6","prev","next","getLotteryInstance","sent","methods","describeLottery","call","abrupt","stop","_x6","apply","this","arguments","_ref7","_callee7","_context7","_x7","setActiveLottery","uiStartLoading","uiStopLoading","setFactory","factoryDetails","factory","manager","ticketPrice","utils","fromWei","String","maxGuessNumber","hexToNumber","currentLottery","allLotteries","randomNumberGenerator","onPlayedLottery","confirmationNumber","onPickedWinnerSuccess","lotteryAddress","_ref2","_callee2","playedLottery","_context2","closed","playersCount","owner","winNumber","winners","_x2","CurrentLotteryDetails","guessNumber","selectGuessNumberError","totalPrize","_this2","getBalance","then","balance","setState","nextProps","nextContext","_this3","loadActiveLottery","_this$props$lottery","width","TextField_default","disabled","id","classNames","margin","textField","value","fullWidth","InputProps","startAdornment","InputAdornment_default","endAdornment","Component","theme","button","spacing","unit","objectSpread","mixins","gutters","paddingTop","paddingBottom","marginTop","FactoryPanel","showPickWinnerButton","handleChange","name","event","_this","defineProperty","target","handlePlayLotteryPressed","onPlayLotteryPressed","shouldShowPickWinnerButton","getAccounts","accounts","handlePickWinnerPressed","pickWinner","guessNumbers","i","push","label","Paper_default","elevation","component","select","error","onChange","fontWeight","map","option","MenuItem_default","key","onClick","components_CurrentLotteryDetails","activeLottery","confirmed","play","send","from","toWei","on","console","log","playLottery","_ref","_callee","lotteryData","_context","_x","ClosedLotteryDialog","handleClose","onCloseClosedLotteryDialog","Dialog_default","open","isClosedLotteryDialogOpen","onClose","aria-labelledby","DialogTitle_default","DialogContent_default","DialogContentText_default","length","winner","index","defaultValue","DialogActions_default","React","closedLottery","App","onAppOpen","components_AppBar","factoryPanel","components_ClosedLotteryDialog","describeFactory","t0","Boolean","location","hostname","match","initialState","Math","random","reducer","action","_action$factory","deployedLotteries","concat","toConsumableArray","isPlayLotteryDialogOpen","rootReducer","combineReducers","factoryReducer","lotteryReducer","uiReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","addLoggingToDispatch","store","rawDispatch","group","returnValue","groupEnd","createStore","applyMiddleware","thunk","configureStore","app","es","src_App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5085ef97.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {withStyles} from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst styles = {\n    root: {\n        flexGrow: 1,\n    },\n};\n\nfunction ProgressBar(props) {\n    const {classes} = props;\n    return (\n        <div className={classes.root}>\n            <LinearProgress color=\"secondary\"/>\n        </div>\n    );\n}\n\nProgressBar.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(ProgressBar);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {withStyles} from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {connect} from \"react-redux\";\nimport ProgressBar from \"./ProgressBar\";\n\n\nconst styles = {\n    root: {\n        flexGrow: 1,\n    },\n    grow: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginLeft: -12,\n        marginRight: 20,\n    },\n    appBar: {\n        backgroundColor: 'black',\n    }\n};\n\nfunction ButtonAppBar(props) {\n    const {classes} = props;\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\" style={styles.appBar}>\n                <Toolbar>\n                    <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n                        Blockchain Lottery\n                    </Typography>\n                    <Button\n                        // onClick={() => props.onOpenCreateLotteryDialog()}\n                        color=\"inherit\">Create Lottery</Button>\n                </Toolbar>\n            </AppBar>\n            {props.isLoading ? <ProgressBar/> : null}\n        </div>\n    );\n}\n\nButtonAppBar.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => {\n    return {\n        isLoading: state.ui.isLoading\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        // onOpenCreateLotteryDialog: () => dispatch(uiOpenCreateLotteryDialog())\n    }\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(ButtonAppBar));","import Web3 from 'web3';\n\n\nlet web3;\n\nif (typeof window !== 'undefined' && typeof window.web3 !== 'undefined') {\n    web3 = new Web3(window.web3.currentProvider);\n} else {\n    const HDWalletProvider = require('truffle-hdwallet-provider');\n\n    const provider = new HDWalletProvider(\n        process.env.REACT_APP_ETH_ACCOUNT_SEED_WORDS,\n        process.env.REACT_APP_ETH_REMOTE_NODE_URL\n    );\n\n    web3 = new Web3(provider);\n}\n\nif (web3 === undefined) {\n    alert('Please enable Metamask to continue');\n}\n\nexport default web3;","import web3 from './web3';\nimport LotteryFactory from './build/LotteryFactory';\n\nconst instance = new web3.eth.Contract(\n    JSON.parse(LotteryFactory.interface),\n    // '0x22aC395C525F02D3Add9194B907F3c5DE7978DEF' // address obtained when the sc is deployed\n    // '0x7d0d91ba579e14a19145e3cce8f03d29076b9d82'\n    // '0xd151ee4f8cc9c2c4f89e63e31393f484742877e0'\n    '0xc6822849fab35a0c17321a8b6196c711ebbaabbd'\n);\n\nexport default instance;","import web3 from './web3';\nimport Lottery from './build/Lottery';\n\nexport default address => new web3.eth.Contract(\n    JSON.parse(Lottery.interface),\n    address\n);","import {SET_ACTIVE_LOTTERY_ACTION, SET_CLOSED_LOTTERY_ACTION, SET_LOTTERY_ACTION} from './actionTypes';\nimport {uiStartLoading, uiStopLoading} from \"./uiActionCreators\";\nimport LotteryFactory from \"../../ethereum/lotteryFactory\";\nimport Lottery from \"../../ethereum/lottery\";\nimport web3 from '../../ethereum/web3';\n\n\nexport const loadActiveLottery = address => {\n    return async dispatch => {\n        dispatch(uiStartLoading());\n        const lottery = await getLotteryDetails(address);\n        const lotteryData = {\n            address: address,\n            closed: lottery[0],\n            playersCount: web3.utils.hexToNumber(lottery[1]),\n            ticketPrice: web3.utils.fromWei(String(lottery[2]), 'ether'),\n            owner: lottery[3]\n        };\n        dispatch(setActiveLottery(lotteryData));\n        dispatch(uiStopLoading());\n    }\n};\n\n\nexport const loadPlayedLottery = address => {\n    return async dispatch => {\n        dispatch(uiStartLoading());\n        const lottery = await getLotteryDetails(address);\n        const playedLottery = {\n            address: address,\n            closed: lottery[0],\n            playersCount: web3.utils.hexToNumber(lottery[1]),\n            ticketPrice: web3.utils.fromWei(String(lottery[2]), 'ether'),\n            owner: lottery[3],\n            winNumber: web3.utils.hexToNumber(lottery[4]),\n            winners: lottery[5]\n        };\n        dispatch(setPlayedLottery(playedLottery));\n        dispatch(uiStopLoading());\n    }\n};\n\n\nexport const setPlayedLottery = lottery => {\n    return {\n        type: SET_CLOSED_LOTTERY_ACTION,\n        lottery\n    }\n};\n\n\n\nexport const fetchDeployedLotteries = () => {\n    return async dispatch => {\n        try {\n            const deployedLotteriesAddresses = await LotteryFactory.methods.getDeployedLotteries().call();\n            dispatch(loadLotteries(deployedLotteriesAddresses));\n        } catch (e) {\n            console.error('Error while fetching deployed lotteries: ', e);\n        }\n    }\n};\n\nexport const loadLotteries = addresses => {\n    return async dispatch => {\n        addresses.forEach(async address => {\n            try {\n                const lottery = await getLotteryDetails(address);\n                const lotteryData = {\n                    address: address,\n                    playersCount: web3.utils.hexToNumber(lottery[0]),\n                    ticketPrice: web3.utils.fromWei(String(lottery[1]), 'ether'),\n                    owner: lottery[2]\n                };\n                dispatch(setLotteryData(lotteryData));\n            } catch (e) {\n                console.error('Error while fetching the lottery data from the address: ', address, e);\n            }\n        });\n    }\n};\n\nconst getLotteryDetails = async (address) => {\n    const lotteryInstance = await getLotteryInstance(address);\n    return await lotteryInstance.methods.describeLottery().call();\n};\n\nconst getLotteryInstance = async (address) => {\n    return await Lottery(address);\n};\n\nexport const setLotteryData = lottery => {\n    return {\n        type: SET_LOTTERY_ACTION,\n        lottery\n    }\n};\n\nexport const setActiveLottery = lottery => {\n    return {\n        type: SET_ACTIVE_LOTTERY_ACTION,\n        lottery\n    }\n};","export const SET_FACTORY_ACTION = 'SET_FACTORY_ACTION';\nexport const ON_PLAYED_LOTTERY_ACTION = 'ON_PLAYED_LOTTERY_ACTION';\nexport const SET_CLOSED_LOTTERY_ACTION = 'SET_CLOSED_LOTTERY_ACTION';\n\n\nexport const UI_START_LOADING_ACTION = 'UI_START_LOADING_ACTION';\nexport const UI_STOP_LOADING_ACTION = 'UI_STOP_LOADING_ACTION';\nexport const OPEN_CLOSED_LOTTERY_DIALOG_ACTION = 'OPEN_CLOSED_LOTTERY_DIALOG_ACTION';\nexport const CLOSE_CLOSED_LOTTERY_DIALOG_ACTION = 'CLOSE_CLOSED_LOTTERY_DIALOG_ACTION';\nexport const CREATE_LOTTERY_ACTION = 'CREATE_LOTTERY_ACTION';\nexport const SET_LOTTERY_ACTION = 'SET_LOTTERY_ACTION';\nexport const OPEN_PLAY_LOTTERY_DIALOG_ACTION = 'OPEN_PLAY_LOTTERY_DIALOG_ACTION';\nexport const CLOSE_PLAY_LOTTERY_DIALOG_ACTION = 'CLOSE_PLAY_LOTTERY_DIALOG_ACTION';\nexport const SET_ACTIVE_LOTTERY_ACTION = 'SET_ACTIVE_LOTTERY_ACTION';","import {\n    CLOSE_CLOSED_LOTTERY_DIALOG_ACTION,\n    CLOSE_PLAY_LOTTERY_DIALOG_ACTION,\n    OPEN_CLOSED_LOTTERY_DIALOG_ACTION,\n    OPEN_PLAY_LOTTERY_DIALOG_ACTION,\n    UI_START_LOADING_ACTION,\n    UI_STOP_LOADING_ACTION\n} from './actionTypes';\nimport {setActiveLottery} from \"./lotteryActionCreators\";\n\n\nexport const uiStartLoading = () => {\n    return {\n        type: UI_START_LOADING_ACTION\n    };\n};\n\n\nexport const uiStopLoading = () => {\n    return {\n        type: UI_STOP_LOADING_ACTION\n    };\n};\n\n\nexport const uiOpenPlayedLotteryDialog = () => {\n    return {\n        type: OPEN_CLOSED_LOTTERY_DIALOG_ACTION\n    };\n};\n\nexport const uiCloseClosedLotteryDialog = () => {\n    return {\n        type: CLOSE_CLOSED_LOTTERY_DIALOG_ACTION\n    };\n};\n\nexport const onUiOpenPlayLotteryDialog = lottery => {\n    return dispatch => {\n        dispatch(setActiveLottery(lottery));\n        dispatch(uiOpenPlayLotteryDialog())\n    }\n};\n\nexport const uiOpenPlayLotteryDialog = () => {\n    return {\n        type: OPEN_PLAY_LOTTERY_DIALOG_ACTION\n    };\n};\n\nexport const uiClosePlayLotteryDialog = () => {\n    return {\n        type: CLOSE_PLAY_LOTTERY_DIALOG_ACTION\n    };\n};","import {ON_PLAYED_LOTTERY_ACTION, SET_FACTORY_ACTION} from './actionTypes';\nimport {uiOpenPlayedLotteryDialog, uiStartLoading, uiStopLoading} from \"./uiActionCreators\";\nimport LotteryFactory from \"../../ethereum/lotteryFactory\";\nimport web3 from \"../../ethereum/web3\";\nimport {loadPlayedLottery} from \"./lotteryActionCreators\";\n\n\nexport const loadFactory = () => {\n    return async dispatch => {\n        dispatch(uiStartLoading());\n        try {\n            const factoryDetails = await LotteryFactory.methods.describeFactory().call();\n            dispatch(setFactory(factoryDetails));\n        } catch (e) {\n            dispatch(uiStopLoading());\n            console.error('Error while fetching deployed lotteries: ', e);\n        }\n        dispatch(uiStopLoading());\n    }\n};\n\nexport const setFactory = factoryDetails => {\n    const factory = {\n        manager: factoryDetails[0],\n        ticketPrice: web3.utils.fromWei(String(factoryDetails[1]), 'ether'),\n        maxGuessNumber: web3.utils.hexToNumber(factoryDetails[2]),\n        currentLottery: factoryDetails[3],\n        allLotteries: factoryDetails[4],\n        randomNumberGenerator: factoryDetails[5]\n    };\n    return {\n        type: SET_FACTORY_ACTION,\n        factory\n    }\n};\n\n\nexport const playLottery = (ticketPrice, guessNumber) => {\n    return dispatch => {\n        dispatch(uiStartLoading());\n        let confirmed = false;\n        web3.eth.getAccounts().then(accounts => {\n            LotteryFactory.methods.play(guessNumber).send(\n                {\n                    from: accounts[0],\n                    value: web3.utils.toWei(String(ticketPrice), 'ether')\n                }\n            )\n                .on('error', (error) => {\n                    dispatch(uiStopLoading());\n                    console.log('Error while playing the lottery: ', error)\n                })\n                .on('confirmation', confirmationNumber => {\n                    // no idea why this is called several times so had to put a flag to call onSuccess only once...\n                    console.log('confirmationNumber: ', confirmationNumber);\n                    if (!confirmed) {\n                        confirmed = true;\n                        dispatch(onPlayedLottery(confirmationNumber));\n                        dispatch(uiStopLoading());\n                    }\n                });\n        });\n\n    }\n};\n\nexport const onPlayedLottery = confirmationNumber => {\n    return {\n        type: ON_PLAYED_LOTTERY_ACTION,\n        confirmationNumber\n    }\n};\n\nexport const pickWinner = lotteryAddress => {\n    return dispatch => {\n        dispatch(uiStartLoading());\n        let confirmed = false;\n        web3.eth.getAccounts().then(accounts => {\n            LotteryFactory.methods.pickWinner().send(\n                {\n                    from: accounts[0]\n                }\n            )\n                .on('error', (error) => {\n                    dispatch(uiStopLoading());\n                    console.log('Error while picking the winner: ', error)\n                })\n                .on('confirmation', () => {\n                    if (!confirmed) {\n                        confirmed = true;\n                        dispatch(onPickedWinnerSuccess(lotteryAddress));\n                        dispatch(uiStopLoading());\n                    }\n                });\n        });\n    }\n};\n\nexport const onPickedWinnerSuccess = lotteryAddress => {\n    return dispatch => {\n        dispatch(loadPlayedLottery(lotteryAddress));\n        dispatch(uiOpenPlayedLotteryDialog())\n    }\n};","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {withStyles} from '@material-ui/core/styles';\nimport classNames from \"classnames\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport TextField from \"@material-ui/core/TextField\";\nimport web3 from '../ethereum/web3';\nimport LotteryFactory from '../ethereum/lotteryFactory';\nimport {connect} from \"react-redux\";\n\nconst styles = theme => ({\n    button: {\n        margin: theme.spacing.unit,\n    },\n    root: {\n        margin: 10,\n        ...theme.mixins.gutters(),\n        paddingTop: theme.spacing.unit * 2,\n        paddingBottom: theme.spacing.unit * 2,\n    },\n    textField: {\n        marginLeft: theme.spacing.unit,\n        marginRight: theme.spacing.unit,\n        marginTop: theme.spacing.unit,\n        width: 200,\n    },\n});\n\n\nclass CurrentLotteryDetails extends Component {\n    state = {\n        guessNumber: -1,\n        selectGuessNumberError: false,\n        totalPrize: ''\n    };\n\n    componentDidMount() {\n        web3.eth.getBalance(LotteryFactory.address)\n            .then(balance => {\n                this.setState({totalPrize: String(balance)})\n            });\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if (this.props.factory !== undefined) {\n            if (this.props.factory.currentLottery === null && nextProps.factory.currentLottery !== null) {\n                this.props.loadActiveLottery(nextProps.factory.currentLottery);\n            }\n        }\n        if (this.props.factory.confirmationNumber !== nextProps.factory.confirmationNumber) {\n            web3.eth.getBalance(LotteryFactory.address)\n                .then(balance => {\n                    this.setState({totalPrize: String(balance)})\n                });\n        }\n    }\n\n    render() {\n        const {classes} = this.props;\n        const {address, playersCount} = this.props.lottery;\n\n        return (\n            <div style={{width: '100%'}}>\n                <TextField\n                    disabled\n                    id=\"ticket\"\n                    className={classNames(classes.margin, classes.textField)}\n                    variant=\"outlined\"\n                    // label=\"Ticket Price\"\n                    value={address}\n                    fullWidth\n                    InputProps={{\n                        startAdornment: <InputAdornment position=\"start\">Address</InputAdornment>\n                    }}\n                    style={{width: '90%'}}\n                />\n                <TextField\n                    disabled\n                    id=\"ticket\"\n                    className={classNames(classes.margin, classes.textField)}\n                    variant=\"outlined\"\n                    // label=\"Ticket Price\"\n                    value={playersCount}\n                    fullWidth\n                    InputProps={{\n                        startAdornment: <InputAdornment position=\"start\">Player Count</InputAdornment>\n                    }}\n                    style={{width: '40%'}}\n                />\n                <TextField\n                    disabled\n                    id=\"ticket\"\n                    className={classNames(classes.margin, classes.textField)}\n                    variant=\"outlined\"\n                    // label=\"Ticket Price\"\n                    value={web3.utils.fromWei(this.state.totalPrize)}\n                    fullWidth\n                    InputProps={{\n                        startAdornment: <InputAdornment position=\"start\">Total Prize</InputAdornment>,\n                        endAdornment: <InputAdornment position=\"start\">ETH</InputAdornment>,\n                    }}\n                    style={{width: '90%'}}\n                />\n            </div>\n        );\n    }\n}\n\nCurrentLotteryDetails.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\n\nconst mapStateToProps = state => {\n    return {\n        factory: state.factory\n    };\n};\n\nexport default connect(mapStateToProps, null)(withStyles(styles)(CurrentLotteryDetails));","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from \"react-redux\";\nimport classNames from 'classnames';\nimport {withStyles} from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport {pickWinner, playLottery} from \"../store/actions/factoryActionCreators\";\nimport {loadActiveLottery} from \"../store/actions/lotteryActionCreators\";\nimport LotteryDetails from \"./CurrentLotteryDetails\";\nimport web3 from '../ethereum/web3'\n\n\nconst styles = theme => ({\n    button: {\n        margin: theme.spacing.unit,\n    },\n    root: {\n        margin: 10,\n        ...theme.mixins.gutters(),\n        paddingTop: theme.spacing.unit * 2,\n        paddingBottom: theme.spacing.unit * 2,\n    },\n    textField: {\n        marginLeft: theme.spacing.unit,\n        marginRight: theme.spacing.unit,\n        marginTop: theme.spacing.unit,\n        width: 200,\n    },\n});\n\n\nclass FactoryPanel extends Component {\n    state = {\n        guessNumber: -1,\n        selectGuessNumberError: false,\n        showPickWinnerButton: false\n    };\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if (this.props.factory.currentLottery === null && nextProps.factory.currentLottery !== null) {\n            this.props.loadActiveLottery(nextProps.factory.currentLottery);\n            this.shouldShowPickWinnerButton();\n        }\n        if (this.props.factory.confirmationNumber !== nextProps.factory.confirmationNumber) {\n            this.props.loadActiveLottery(nextProps.factory.currentLottery);\n        }\n    }\n\n    handleChange = name => event => {\n        this.setState({[name]: event.target.value});\n    };\n\n    handlePlayLotteryPressed = () => {\n        const {guessNumber} = this.state;\n        const {maxGuessNumber} = this.props.factory;\n\n        if (guessNumber <= maxGuessNumber && guessNumber >= 0) {\n            this.setState({selectGuessNumberError: false});\n            const ticketPrice = this.props.factory.ticketPrice;\n            this.props.onPlayLotteryPressed(ticketPrice, guessNumber);\n        } else {\n            this.setState({selectGuessNumberError: true});\n        }\n    };\n\n    shouldShowPickWinnerButton = () => {\n        // we show the pick winner button just in case we are the manager of the factory\n        web3.eth.getAccounts()\n            .then(accounts => {\n                this.setState({\n                    ...this.state,\n                    showPickWinnerButton: this.props.factory.manager === accounts[0]\n                })\n            })\n    };\n\n    handlePickWinnerPressed = () => {\n        this.props.pickWinner(this.props.factory.currentLottery);\n    };\n\n\n    render() {\n        const {classes} = this.props;\n\n        const guessNumbers = [];\n        for (let i = 0; i <= this.props.factory.maxGuessNumber; i++) {\n            guessNumbers.push({value: i, label: String(\"  \" + i)})\n        }\n\n        return (\n            <div>\n                <Paper className={classes.root} elevation={1}>\n                    <Typography variant=\"h5\" component=\"h3\">\n                        Play the lottery\n                    </Typography>\n                    <div style={{width: '100%'}}>\n                            <TextField\n                                disabled\n                                id=\"ticket\"\n                                className={classNames(classes.margin, classes.textField)}\n                                variant=\"outlined\"\n                                // label=\"Ticket Price\"\n                                value={this.props.factory.ticketPrice}\n                                fullWidth\n                                InputProps={{\n                                    startAdornment: <InputAdornment position=\"start\">Ticket Price</InputAdornment>,\n                                    endAdornment: <InputAdornment position=\"start\">ETH</InputAdornment>,\n                                }}\n                                style={{width: '90%'}}\n                            />\n                            <TextField\n                                select\n                                className={classNames(classes.margin, classes.textField)}\n                                variant=\"outlined\"\n                                // label=\"With Select\"\n                                value={this.state.guessNumber}\n                                error={this.state.selectGuessNumberError}\n                                onChange={this.handleChange('guessNumber')}\n                                InputProps={{\n                                    startAdornment: <InputAdornment position=\"start\">Guess Number</InputAdornment>,\n                                }}\n                                style={{width: '150px', fontWeight: 'bold'}}\n                            >\n                                {guessNumbers.map(option => (\n                                    <MenuItem key={option.value} value={option.value}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n\n                        <Button variant=\"outlined\" className={classes.button} onClick={this.handlePlayLotteryPressed}>\n                            Play\n                        </Button>\n\n                        {\n                            this.state.showPickWinnerButton ?\n                                <Button variant=\"outlined\" className={classes.button}\n                                        onClick={this.handlePickWinnerPressed}>\n                                    Pick Winner\n                                </Button>\n                                : null\n                        }\n\n                    </div>\n                    <Paper className={classes.root} elevation={1}>\n                        <Typography variant=\"h5\" component=\"h3\">\n                            Lottery Details\n                        </Typography>\n                        {this.props.currentLottery ? <LotteryDetails lottery={this.props.currentLottery}/> : null}\n                    </Paper>\n\n                </Paper>\n            </div>\n        );\n    }\n}\n\nFactoryPanel.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => {\n    return {\n        factory: state.factory,\n        currentLottery: state.lottery.activeLottery\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onPlayLotteryPressed: (ticketPrice, guessNumber) => dispatch(playLottery(ticketPrice, guessNumber)),\n        loadActiveLottery: address => dispatch(loadActiveLottery(address)),\n        pickWinner: lotteryAddress => dispatch(pickWinner(lotteryAddress))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(FactoryPanel));","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {connect} from \"react-redux\";\nimport {uiCloseClosedLotteryDialog} from \"../store/actions/uiActionCreators\";\nimport classNames from \"classnames\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport TextField from \"@material-ui/core/TextField\";\nimport PropTypes from \"prop-types\";\nimport {withStyles} from '@material-ui/core/styles';\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst styles = theme => ({\n    button: {\n        margin: theme.spacing.unit,\n    },\n    root: {\n        margin: 10,\n        ...theme.mixins.gutters(),\n        paddingTop: theme.spacing.unit * 2,\n        paddingBottom: theme.spacing.unit * 2,\n    },\n    textField: {\n        marginLeft: theme.spacing.unit,\n        marginRight: theme.spacing.unit,\n        marginTop: theme.spacing.unit,\n        width: 200,\n    },\n});\n\n\nclass ClosedLotteryDialog extends React.Component {\n\n    handleClose = () => {\n        this.props.onCloseClosedLotteryDialog();\n    };\n\n    render() {\n        const {classes} = this.props;\n        return (\n            <Dialog\n                open={this.props.isClosedLotteryDialogOpen}\n                onClose={this.handleClose}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <DialogTitle id=\"form-dialog-title\">You Picked a Winner</DialogTitle>\n                {this.props.lottery ?\n                    <DialogContent>\n                        <DialogContentText>\n                            <TextField\n                                disabled\n                                id=\"ticket\"\n                                className={classNames(classes.margin, classes.textField)}\n                                variant=\"outlined\"\n                                // label=\"Ticket Price\"\n                                value={this.props.lottery.playersCount}\n                                fullWidth\n                                InputProps={{\n                                    startAdornment: <InputAdornment position=\"start\">Players Count</InputAdornment>\n                                }}\n                                style={{width: '90%'}}\n                            />\n\n                            <TextField\n                                disabled\n                                id=\"ticket\"\n                                className={classNames(classes.margin, classes.textField)}\n                                variant=\"outlined\"\n                                // label=\"Ticket Price\"\n                                value={this.props.lottery.winNumber}\n                                fullWidth\n                                InputProps={{\n                                    startAdornment: <InputAdornment position=\"start\">Winning Number</InputAdornment>\n                                }}\n                                style={{width: '90%'}}\n                            />\n\n                            <TextField\n                                disabled\n                                id=\"ticket\"\n                                className={classNames(classes.margin, classes.textField)}\n                                variant=\"outlined\"\n                                // label=\"Ticket Price\"\n                                value={this.props.lottery.winners.length}\n                                fullWidth\n                                InputProps={{\n                                    startAdornment: <InputAdornment position=\"start\">Winners Count</InputAdornment>\n                                }}\n                                style={{width: '90%'}}\n                            />\n\n                            <Paper className={classes.root} elevation={1}>\n                                <Typography variant=\"h5\" component=\"h3\">\n                                    Winners\n                                </Typography>\n                                {this.props.lottery.winners.map((winner, index) => (\n                                    <TextField\n                                        disabled\n                                        id=\"standard-disabled\"\n                                        label={\"Player \" + (index + 1)}\n                                        defaultValue={winner}\n                                        className={classes.textField}\n                                        margin=\"normal\"\n                                        fullWidth\n                                        style={{width: '95%'}}\n                                    />\n                                ))}\n                            </Paper>\n\n\n                        </DialogContentText>\n\n                    </DialogContent>\n                    : null}\n                <DialogActions>\n                    <Button onClick={this.handleClose} color=\"primary\">\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nClosedLotteryDialog.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onCloseClosedLotteryDialog: () => dispatch(uiCloseClosedLotteryDialog()),\n    }\n};\n\nconst mapStateToProps = state => {\n    return {\n        isClosedLotteryDialogOpen: state.ui.isClosedLotteryDialogOpen,\n        lottery: state.lottery.closedLottery\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(ClosedLotteryDialog));","import React, {Component} from 'react';\nimport AppBar from './components/AppBar';\nimport FactoryPanel from './components/factoryPanel';\n// import LotteriesTable from './components/LotteriesTable'\n// import CreateLotteryDialog from \"./components/CreateLotteryDialog\";\n// import PlayLotteryDialog from \"./components/PlayLotteryDialog\";\nimport {loadFactory} from \"./store/actions/factoryActionCreators\";\nimport {connect} from \"react-redux\";\nimport PlayedLotteryDialog from \"./components/ClosedLotteryDialog\";\n\nclass App extends Component {\n\n    componentDidMount() {\n        this.props.onAppOpen();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <AppBar/>\n                <FactoryPanel/>\n                <PlayedLotteryDialog/>\n                {/*<LotteriesTable/>*/}\n                {/*<CreateLotteryDialog/>*/}\n                {/*<PlayLotteryDialog/>*/}\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAppOpen: () => dispatch(loadFactory())\n    }\n};\n\n\nexport default connect(null, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ON_PLAYED_LOTTERY_ACTION, SET_FACTORY_ACTION} from '../actions/actionTypes';\n\nconst initialState = {\n    manager: null,\n    ticketPrice: 0,\n    maxGuessNumber: null,\n    currentLottery: null,\n    allLotteries: [],\n    randomNumberGenerator: null,\n    confirmationNumber: Math.random()\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_FACTORY_ACTION:\n            const {\n                manager,\n                ticketPrice,\n                maxGuessNumber,\n                currentLottery,\n                allLotteries,\n                randomNumberGenerator\n            } = action.factory;\n            return {\n                ...state,\n                manager,\n                ticketPrice,\n                maxGuessNumber,\n                currentLottery,\n                allLotteries,\n                randomNumberGenerator\n            };\n        case ON_PLAYED_LOTTERY_ACTION:\n            return {\n                ...state,\n                confirmationNumber: action.confirmationNumber\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;","import {\n    CREATE_LOTTERY_ACTION,\n    SET_ACTIVE_LOTTERY_ACTION,\n    SET_CLOSED_LOTTERY_ACTION,\n    SET_LOTTERY_ACTION\n} from '../actions/actionTypes';\n\nconst initialState = {\n    deployedLotteries: [],\n    activeLottery: null,\n    closedLottery: null\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case CREATE_LOTTERY_ACTION:\n            return {\n                ...state\n            };\n        case SET_LOTTERY_ACTION:\n            return {\n                ...state,\n                deployedLotteries: [...state.deployedLotteries, action.lottery]\n            };\n        case SET_ACTIVE_LOTTERY_ACTION:\n            return {\n                ...state,\n                activeLottery: action.lottery\n            };\n        case SET_CLOSED_LOTTERY_ACTION:\n            return {\n                ...state,\n                closedLottery: action.lottery\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;","import {\n    CLOSE_CLOSED_LOTTERY_DIALOG_ACTION,\n    CLOSE_PLAY_LOTTERY_DIALOG_ACTION,\n    OPEN_CLOSED_LOTTERY_DIALOG_ACTION,\n    OPEN_PLAY_LOTTERY_DIALOG_ACTION,\n    UI_START_LOADING_ACTION,\n    UI_STOP_LOADING_ACTION\n} from '../actions/actionTypes';\n\nconst initialState = {\n    isLoading: false,\n    isClosedLotteryDialogOpen: false,\n    isPlayLotteryDialogOpen: false\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case UI_START_LOADING_ACTION:\n            return {\n                ...state,\n                isLoading: true\n            };\n        case UI_STOP_LOADING_ACTION:\n            return {\n                ...state,\n                isLoading: false\n            };\n        case OPEN_CLOSED_LOTTERY_DIALOG_ACTION:\n            return {\n                ...state,\n                isClosedLotteryDialogOpen: true\n            };\n        case CLOSE_CLOSED_LOTTERY_DIALOG_ACTION:\n            return {\n                ...state,\n                isClosedLotteryDialogOpen: false\n            };\n        case OPEN_PLAY_LOTTERY_DIALOG_ACTION:\n            return {\n                ...state,\n                isPlayLotteryDialogOpen: true\n            };\n        case CLOSE_PLAY_LOTTERY_DIALOG_ACTION:\n            return {\n                ...state,\n                isPlayLotteryDialogOpen: false\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;","import thunk from \"redux-thunk\";\nimport {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\n\nimport factoryReducer from './reducers/factoryReducer';\nimport lotteryReducer from './reducers/lotteryReducer';\nimport uiReducer from './reducers/uiReducer';\n\n\nconst rootReducer = combineReducers({\n    factory: factoryReducer,\n    lottery: lotteryReducer,\n    ui: uiReducer\n\n});\n\nconst composeEnhancers =\n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n            // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n        }) : compose;\n\nconst addLoggingToDispatch = store => {\n    const rawDispatch = store.dispatch;\n\n    if (!console.group) {\n        return rawDispatch;\n    }\n\n    return action => {\n        // console.group(\"Return action from configure store: \", action.type);\n        // console.log(\"%c prev state\", \"color: gray\", store.getState());\n        // console.log(\"%c action\", \"color: blue\", action);\n        const returnValue = rawDispatch(action);\n        // console.log(\"%c next state\", \"color: green\", store.getState());\n        console.groupEnd(action.type);\n\n        return returnValue;\n    };\n};\n\nexport default function configureStore() {\n    const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n    store.dispatch = addLoggingToDispatch(store);\n    return store;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport configureStore from './store/configureStore';\n\nconst store = configureStore();\n\nconst app = <Provider store={store}><App/></Provider>;\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}